{"version":3,"file":"static/webpack/static/development/pages/index.js.3b42b2a2b9e2eee26895.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import Head from 'next/head'\nimport JamButton from '../components/JamButton'\nimport KeyboardShortcuts from '../components/KeyboardShortcuts'\nimport isAuthenticated from '../util/isAuthenticated'\nimport isPermissioned from '../util/isPermissioned'\nimport logInUser from '../util/logInUser'\nimport getUserIdFromJamFilledCookie from '../util/getUserIdFromJamFilledCookie'\nimport getUserByIdInJamFilledStorage from '../util/fetchApiHelpers/getUserByIdInJamFilledStorage'\nimport getUserFromLocalStorage from '../util/getUserFromLocalStorage'\nimport getThreads from '../util/fetchApiHelpers/getThreads'\nimport JamThread from '../components/JamThread'\nimport JamCreateNewComment from '../components/JamCreateNewComment'\nimport ClickCollectorOverlay from '../components/ClickCollectorOverlay'\nimport TypeJamToEnableJamBanner from '../components/TypeJamToEnableJamBanner'\nimport getPeopleInTheJam from '../util/getPeopleInTheJam'\nimport demoUsers from '../util/demoUsers'\nimport clickIsNotOnJamElement from '../util/fetchApiHelpers/clickIsNotOnJamElement'\nimport DoubleClickToCommentInstructionBanner from '../components/DoubleClickToCommentInstructionBanner'\n\n// pull in config vars\nimport * as config from '../util/config' \n\nexport default class Index extends React.Component {\n\n    static getInitialProps = ({ query }) => {\n        return { jamFilledCookie: query['jam_filled_cookie'] }\n    }\n\n    static getDerivedStateFromProps = (props, state) => {\n        // if cookie is in the query param, save it as a cookie\n        return { jamFilledCookie: props.jamFilledCookie }\n    }\n\n    state = {\n        ready: false,\n        jamFilledCookie: '',\n        clickX: null,\n        clickY: null,\n        jamTime: false,\n        newCommentEditorOpen: false,\n        threads: [],\n        whichThreadIsOpen: -1, // thread index with open preview since only one can be open at a time. -1 is all closed\n        hasPermission: false // check for permission for user to jam on this Jam\n    }\n\n    componentDidMount = async () => {\n        const { jamTime, jamFilledCookie } = this.state \n\n        // if cookie is in the query param, save it as a cookie and in local storage \n        if (jamFilledCookie) {\n            document.cookie = `jam_filled_cookie=${jamFilledCookie}, domain=${window.location.host}`\n            await getUserByIdInJamFilledStorage()\n            window.location.search = ''\n        } \n\n        // if demo, load in demo users\n        if (window.location.host == 'letsjam.xyz' || window.location.host == '127.0.0.1:3001') {\n            // choose a demo user\n            let selectedDemoUserIndex = Math.floor(Math.random() * 10)\n            document.cookie = `jam_filled_cookie=${demoUsers[selectedDemoUserIndex].token}`\n            localStorage.setItem('jamUser', JSON.stringify(demoUsers[selectedDemoUserIndex]))\n        }   \n\n        if (jamTime) {\n            await this.fetchInitialJamTimeData()\n        }\n    }\n\n    fetchInitialJamTimeData = async () => {\n        // check users permission and auth\n        await this.handleAuthentication()\n\n        // fetch initial threads\n        this.setState({ threads: await getThreads() }, ()=> { this.setState({ ready: true }) })\n\n        // get the people in the jam for mentions in the editor\n        this.setState({ mentions: await getPeopleInTheJam() })\n    }\n\n    handleClick = (e) => {\n        const { whichThreadIsOpen, newCommentEditorOpen } = this.state\n\n        if (clickIsNotOnJamElement(e)) {\n            // if editor is open, close it\n            if (newCommentEditorOpen) {\n                this.setState({ newCommentEditorOpen: false })\n            } else if (whichThreadIsOpen > -1) {\n                // else if a thread is open, close it\n                this.setState({ whichThreadIsOpen: -1 })\n            } \n        }\n    }\n\n    handleDoubleClick = (e) => {\n        const { whichThreadIsOpen, newCommentEditorOpen } = this.state\n        if (clickIsNotOnJamElement(e)) {\n            // if editor is open, close it\n            if (newCommentEditorOpen) {\n                this.setState({ newCommentEditorOpen: false })\n            } else if (whichThreadIsOpen > -1) {\n                // else if a thread is open, close it\n                this.setState({ whichThreadIsOpen: -1 })\n            } else {\n                // else create a new commment\n                this.createNewComment(e)\n            }\n        }\n    }\n\n    toggleJamMode = async () => {\n        const newJamMode = !this.state.jamTime\n        \n        this.setState({ jamTime: newJamMode })\n        //  if jam time, make sure user is authed and has permissions\n        if (newJamMode) await this.handleAuthentication()\n\n        // if first jam mode, go fetch all the things\n        if (newJamMode && !this.state.threads.length) await this.fetchInitialJamTimeData()\n\n        // click event handler\n        if (newJamMode) {\n            document.addEventListener('click', this.handleClick)\n            document.addEventListener('dblclick', this.handleDoubleClick)\n        } else {\n            document.removeEventListener('click', this.handleClick)\n            document.removeEventListener('dblclick', this.handleDoubleClick)\n        }\n    }\n\n    handleAuthentication = async () => {\n        const authenticated = isAuthenticated() // check if jam_filled_cookie present        \n        if (authenticated) {\n            // if the user is in local storage, get user and set them to local storage\n            if (!getUserFromLocalStorage()) {\n                await getUserByIdInJamFilledStorage()\n            }\n\n            // then get user from local storage\n            this.setState({ loggedInUser: getUserFromLocalStorage() })\n\n            // check permissions - can they access this jam?\n            const permissioned = await isPermissioned()\n            this.setState({ hasPermission: permissioned })\n\n            // if no, need to redirect them to request permission\n            if (!permissioned) window.open(`${config.API_HOSTNAME}?state=request-access&jamId=${config.JAM_ID}&userId=${getUserIdFromJamFilledCookie}`, '_blank');\n        } else {\n            // go and get authenticated!\n            const loginSuccess = await logInUser() // sets user to local storage\n            // set user to state\n            if (loginSuccess) this.setState({ loggedInUser: getUserFromLocalStorage() })\n            else { console.log('failed to login') }\n        }\n    }\n\n    createNewComment = (e) => {\n        this.setState({ newCommentEditorOpen: true })\n        this.setState({ clickX: e.pageX, clickY: e.pageY })\n    }\n\n    updateThread = (newThread, keepThreadOpen = true) => {\n        // this is called after a comment is posted, when thread is moved, and when thread is resolved, to update the thread in the ui\n        const { threads } = this.state\n        let tempThreads = threads\n        const index = threads.findIndex(thread => thread._id == newThread._id)\n        index > -1 ? tempThreads[index] = newThread : tempThreads.push(newThread)\n        this.setState({ threads: tempThreads, tempThreadIndexForUpdateThreadFunction: index }, () => {\n            // to keep the thread open after commenting\n            if (keepThreadOpen) {\n                const { tempThreadIndexForUpdateThreadFunction, threads } = this.state\n                if (tempThreadIndexForUpdateThreadFunction == -1) this.updateWhichThreadIsOpen(threads.length - 1)\n                else this.updateWhichThreadIsOpen(tempThreadIndexForUpdateThreadFunction)\n            }\n        })\n        \n        if (keepThreadOpen) {\n            // if newComment open, close it\n            this.setState({ newCommentEditorOpen: false })\n        }\n    }\n\n    // used for resolving threads\n    deleteThread = (threadId) => {\n        try {\n            const { threads } = this.state\n            let tempThreads = threads\n            const index = threads.findIndex(thread => thread._id == threadId)\n            tempThreads.splice(index, 1)\n            this.setState({ threads: tempThreads })\n            this.updateWhichThreadIsOpen(-1)\n        } catch (e) {\n            console.log(e);\n            \n        }\n        \n    } \n\n    updateWhichThreadIsOpen = (threadId) => {\n        this.setState({ whichThreadIsOpen: threadId })\n    }\n\n    render() {\n        const { ready, jamTime, loggedInUser, threads, whichThreadIsOpen, newCommentEditorOpen, clickX, clickY, mentions } = this.state\n\n        return (\n            <div>\n                {/* pull in jam css */}\n                <Head>\n                    <meta charSet=\"utf-8\" />\n                    <link rel=\"stylesheet\" href=\"jam.css\" />\n                    <link rel=\"stylesheet\" href=\"jam-comment.css\" />\n                    <link rel=\"stylesheet\" href=\"thread.css\" />\n                    <link rel=\"stylesheet\" href=\"thread-editor.css\" />\n                    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/draft-js/0.11.5/Draft.min.css\" />\n                    <link rel=\"stylesheet\" href=\"jamDraftJsMentionsStyles.css\" />\n                </Head>\n                {/* load the jam button */}\n                <JamButton toggleJamMode={this.toggleJamMode} jamTime={jamTime} />\n\n                {/* load the little type jam to enable jam banner */}\n                <TypeJamToEnableJamBanner jamTime={jamTime} />\n\n                {/* load the little double click to leave a comment instruction */}\n                {ready && jamTime && <DoubleClickToCommentInstructionBanner />}\n\n                {/* when ready, and in jam mode, load threads and the click collector */}\n                {ready && jamTime && threads.map((thread, index) => <JamThread key={thread._id} thread={thread} loggedInUser={loggedInUser} updateThread={this.updateThread} threadOpen={whichThreadIsOpen == index ? true : false} updateWhichThreadIsOpen={this.updateWhichThreadIsOpen} threadIndex={index} deleteThread={this.deleteThread} mentions={mentions} /> )}\n\n                {/* if newCommentEditorOpen, add the new comment editor at state x and y */}\n                {ready && jamTime && newCommentEditorOpen && <JamCreateNewComment loggedInUser={loggedInUser} x={clickX} y={clickY} updateThread={this.updateThread} mentions={mentions} />}\n                \n                {/* pull in keyboard shortcuts */}\n                <KeyboardShortcuts toggleJamMode={this.toggleJamMode} />\n            </div>\n        )\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAVA;AACA;AAWA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AALA;AAAA;AACA;AADA;AAOA;AACA;AARA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAKA;AALA;AACA;AADA;AAKA;AAAA;AAAA;AAAA;AACA;AANA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAQA;AARA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AAXA;AAAA;AACA;AADA;AAYA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAmBA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAyBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AArNA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}