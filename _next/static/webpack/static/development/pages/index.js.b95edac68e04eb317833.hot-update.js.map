{"version":3,"file":"static/webpack/static/development/pages/index.js.b95edac68e04eb317833.hot-update.js","sources":["webpack:///./components/JamThread.js"],"sourcesContent":["import JamPreview from './JamPreview'\nimport humanReadableTimeFrom from '../util/humanReadableTimeAgo'\nimport resolveThreadById from '../util/fetchApiHelpers/resolveThreadById'\nimport JamThreadEditor from './JamThreadEditor'\nimport JamEditorDisplayMode from './JamEditorDisplayMode'\nimport Draggable from 'react-draggable'\nimport editThread from '../util/fetchApiHelpers/editThread'\n\nexport default class JamThread extends React.Component {\n    constructor(props) {\n        super(props)\n        const { thread } = props\n        console.log('in the jamthread constructor')\n        this.setState({\n            threadX: thread.x,\n            threadY: thread.y\n        })\n    }\n\n    state = { threadOpen: false, dragging: false }\n \n    handlePreviewClick = (e) => {\n        const { threadOpen, threadIndex, updateWhichThreadIsOpen } = this.props\n        \n        // when one thread opens, other threads must close\n        if (!e.target.className.includes('preview-dragger')) updateWhichThreadIsOpen(!threadOpen ? threadIndex : -1)     \n    }\n\n    handleThreadClick = (e) => {\n        const { changeState } = this.props\n    }\n\n    handleResolve = async (e) => {\n        const { thread, deleteThread } = this.props\n        await resolveThreadById(thread._id)\n        deleteThread(thread._id)\n    }\n\n    handleDragStart = () => {\n        this.setState({ dragging: true })\n    }\n\n    handleDragEnd = async (e) => {\n        const { thread, updateThread } = this.props\n        this.setState({ threadX: e.pageX, threadY: e.pageY, dragging: false })\n        const updatedThread = await editThread(e.pageX, e.pageY, thread._id)\n        await updateThread(updatedThread)\n    }\n\n    handleOnDrag = async (e) => {\n        this.setState({ threadX: e.pageX, threadY: e.pageY })\n    }\n\n    toggleDragStatus = (status) => {\n        const { dragging } = this.state\n        this.setState({ dragging: status })\n    }\n\n    updateThreadPosition = (x,y) => {\n        this.setState({ threadX: x, threadY: y })\n    }\n\n    render() {\n        const { thread, threadOpen, updateThread, loggedInUser } = this.props\n        const { threadX, threadY } = this.state\n        if (threadOpen) {\n            return (\n                // <Draggable handle=\".thread-header-container\" onStop={this.handleDragEnd} onDrag={this.handleOnDrag} >\n                <div style={{ top: `${threadY ? threadY : thread.y}px`, left: `${threadX ? threadX : thread.x}px`, zIndex: `${threadOpen ? 1000001 : 1000000 }` }} id={`thread-container-${thread._id}`} className={`thread-container ${thread._id}`}>\n                    <div className={`thread-header-container ${thread._id}`}>\n                        <div style={{ display: 'flex' }}>\n                            <img className=\"thread-header-author-avatar\" src={thread.author.avatar} />\n                            <div className=\"thread-header-author-name\">{thread.author.name}</div>\n                            <div className=\"thread-header-created-at\">{humanReadableTimeFrom(thread._id)}</div>\n                        </div>\n                        <div onClick={this.handleResolve} className=\"thread-header-resolve-button jam---button\">Resolve</div>\n                    </div>\n                    {thread.comments.map((comment, index) => {\n                        let rawMessageBlocks\n                        try {\n                           rawMessageBlocks = JSON.parse(comment.message)\n                        } catch (e) {\n                           rawMessageBlocks = false\n                        }\n                     if (index == 0) {\n                         return (\n                            <div id={`thread-message-${thread._id}`} key={`thread-message-${thread._id}`} className=\"thread-message first-comment\">\n                                <JamEditorDisplayMode rawMessageBlocks={rawMessageBlocks} />\n                            </div>\n                         )\n                     } else {\n                         return (\n                            <div key={`thread-comment-${index}-${thread._id}`} className={`comment-container ${thread._id}`}>\n                                <div className=\"comment-header\">\n                                    <img className=\"comment-avatar\" src={comment.author.avatar} />\n                                    <div className=\"comment-author\">{comment.author.name}</div>\n                                    <div className=\"comment-time\">{humanReadableTimeFrom(comment._id)}</div>\n                                </div>\n                                <JamEditorDisplayMode rawMessageBlocks={rawMessageBlocks} />\n                            </div>\n                         )\n                     }   \n                    })}\n                    <JamThreadEditor loggedInUser={loggedInUser} thread={thread} updateThread={updateThread} mentions={this.props.mentions} />\n                </div>\n                // </Draggable>\n            )\n        } else {\n            return (\n                <JamPreview \n                    handlePreviewClick={this.handlePreviewClick} \n                    thread={thread} \n                    updateThread={updateThread} \n                    toggleDragStatus={this.toggleDragStatus} \n                    updateThreadPosition={this.updateThreadPosition}\n                    threadX={threadX}\n                    threadY={threadY}\n                />\n            )\n            \n        }\n    }    \n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AAAA;AAAA;AACA;AAXA;AAYA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAlBA;AAmBA;AAEA;AACA;AAtBA;AAuBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAxBA;AA8BA;AAAA;AAAA;AACA;AACA;AAhCA;AAiCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AACA;AADA;AAGA;AAHA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlCA;AAwCA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAzCA;AA4CA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAhDA;AAkDA;AAAA;AAAA;AAAA;AACA;AACA;AApDA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AALA;AAQA;AACA;;;AA4CA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAtCA;AAyCA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;;;;AAjHA;AACA;;;;;A","sourceRoot":""}