{"version":3,"file":"static/webpack/static/development/pages/index.js.621994d5d5320885438c.hot-update.js","sources":["webpack:///./components/JamPreview.js"],"sourcesContent":["import humanReadableDaysAgo from '../util/humanReadableTimeAgo'\nimport { EditorState, convertFromRaw } from 'draft-js'\nimport Draggable from 'react-draggable'\nimport editThread from '../util/fetchApiHelpers/editThread'\n\nexport default class JamPreview extends React.Component {\n    constructor(props) {\n        super(props)\n        const { thread } = props\n        this.avatars = this.createAvatarsArray()\n        this.previewText = this.createMessagePreview()\n    }\n\n    createMessagePreview = () => {\n        const { thread } = this.props\n        const jsonifiedCommentMessage = JSON.parse(thread.comments[thread.comments.length - 1].message)\n        const messageConvertedFromRaw = convertFromRaw(jsonifiedCommentMessage)    \n        const tempEditorState = EditorState.createWithContent(messageConvertedFromRaw)\n        let commentText = tempEditorState.getCurrentContent().getPlainText('\\u0001')\n        return commentText.replace('\\u0001', ' ')\n    }\n\n    createAvatarsArray = () => {\n        const { thread } = this.props\n        let authorsArray = []\n        thread.comments.forEach((comment) => {\n            // if not alreadt in the authors aray, add it\n            if (!authorsArray.some(author => author.name === comment.author.name) && authorsArray.length < 6) {\n                authorsArray.push(comment.author)\n            } \n        })\n\n        return authorsArray.map((author) => <img key={author._id} src={author.avatar} />)\n    }\n\n    handleDragStart = () => {\n        this.props.toggleDragStatus(true)\n    }\n\n    handleDragEnd = async (e) => {\n        const { thread, updateThread, toggleDragStatus, handlePreviewClick, updateThreadPosition } = this.props\n        console.log(e);\n        \n        toggleDragStatus(false)\n        if (!e.target.className.includes('preview-dragger') && e.type !== \"mouseup\") {\n            console.log('not a real click, opening the preview');\n            \n            // not a real drag just open the preview    \n            handlePreviewClick(e)\n        } else {\n            const { x, y } = this.getMousePosWithinElement(e)\n            updateThreadPosition(x, y)\n            const updatedThread = await editThread(x, y, thread._id)\n            await updateThread(updatedThread, false)\n        }\n    }\n\n    handleOnDrag = (e) => {\n        const { updateThreadPosition } = this.props\n\n        if (e.type === 'mousemove') { // e.target.className.includes('preview-dragger')            \n            // updateThreadPosition(e.pageX, e.pageY)\n        }\n    }\n\n    stopImageFromDragging = (e) => {\n        e.preventDefault()\n    }\n\n    getMousePosWithinElement = (e) => { \n        console.log(e.target.parentNode)       \n        const element = e.target.parentNode.getBoundingClientRect();\n        console.log(element);\n        \n        const x = e.clientX - (e.clientX - element.left); \n        const y = e.clientY - (e.clientY - element.top);  \n\n        return { x, y }\n    }\n\n    render() {\n        const { thread, handlePreviewClick } = this.props\n        const { threadX, threadY } = this.props\n        return (\n            <Draggable handle=\".preview-dragger\" onStart={this.handleDragStart} onStop={this.handleDragEnd} onDrag={this.handleOnDrag}>\n            <div onClick={handlePreviewClick} key={`jam-preview-${thread._id}`} style={{ top: `${threadY ? threadY : thread.y}px`, left: `${threadX ? threadX : thread.x}px` }} id={`preview-thread-${thread._id}`} className={`jam-preview ${thread._id}`}>\n                <div className=\"preview-container\">\n                    <img onDragStart={this.stopImageFromDragging} className=\"preview-dragger\" src=\"/img/icons/draggable.svg\" />\n                    <div className=\"preview-avatars\">{this.avatars}</div>\n                    <div className=\"preview-num-comments\">{`${thread.comments.length} ${thread.comments.length > 1 ? \"replies\" : \"comment\"}`}</div>\n                    <p className=\"preview-text\">{this.previewText}</p>\n                    <div className=\"preview-reply-date\">{humanReadableDaysAgo(thread.comments[thread.comments.length - 1]._id)}</div>\n                </div>\n            </div>\n            </Draggable>\n        )\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAgBA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA5BA;AA8BA;AACA;AACA;AAhCA;AAiCA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AATA;AAAA;AACA;AADA;AAAA;AAYA;AAZA;AAAA;AACA;AADA;AAaA;AAbA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAlCA;AAmDA;AACA;AAEA;AACA;AACA;AACA;AACA;AA1DA;AA4DA;AACA;AACA;AA9DA;AAgEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAzEA;AAGA;AACA;AAJA;AAKA;AACA;;;AAoEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA3FA;AACA;;;;;A","sourceRoot":""}